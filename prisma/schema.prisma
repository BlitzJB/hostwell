// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  email                  String?                 @unique
  emailVerified          DateTime?
  image                  String?
  bio                    String?
  avatar                 String?
  accounts               Account[]
  sessions               Session[]
  registrations          EventRegistration[]
  reviews                Review[]
  interests              Category[]
  createdEvents          Event[]
  feedbackFieldResponses FeedbackFieldResponse[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id            String              @id @default(cuid())
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  title         String
  date          DateTime
  image         String?
  description   String
  slug          String
  price         Decimal
  currency      String
  creator       User                @relation(fields: [creatorId], references: [id])
  creatorId     String
  registrations EventRegistration[]
  reviews       Review[]
  categories    Category[]
  announcements Accouncement[]
  feedbackForms FeedbackForm[]
}

model EventRegistration {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  event         Event    @relation(fields: [eventId], references: [id])
  eventId       String
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  paymentStatus String

  @@unique([eventId, userId])
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  rating    Int
  comment   String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  slug      String
  events    Event[]
  users     User[]
}

model Accouncement {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
}

model FeedbackForm {
  id             String                  @id @default(cuid())
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  name           String
  forEventId     String
  forEvent       Event                   @relation(fields: [forEventId], references: [id])
  message        String
  slug           String
  fields         FeedbackField[]
  fieldResponses FeedbackFieldResponse[]
}

model FeedbackField {
  id          String                  @id @default(cuid())
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  name        String
  type        String
  placeholder String
  form        FeedbackForm            @relation(fields: [formId], references: [id])
  formId      String
  responses   FeedbackFieldResponse[]
  required    Boolean
}

model FeedbackFieldResponse {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  authorId  String
  author    User          @relation(fields: [authorId], references: [id])
  field     FeedbackField @relation(fields: [fieldId], references: [id])
  fieldId   String
  response  String
  form      FeedbackForm  @relation(fields: [formId], references: [id])
  formId    String
}
